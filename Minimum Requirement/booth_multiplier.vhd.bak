--/------------------------------------------------------------------------------------
--
-- Authors: Nitish Sundarraj Balaji, Balaji Ravindaran
-- 
-- File: booth_multiplier.vhd

-- Design Units:
--      entity header
--          function: To show a header
--          input:
--          output: 
--      architecture header_arch:
--          truth_table based sum-of-products
--          implementation
--
-- Library/ Package:
--      ieee.std_logic_1164: to use std_logic
--
-- Synthesis and Verification:
--      Synthesis Software: 
--      Options/Script :
--      Target Technology:
--      Test Bench: header_tb
--
-- Revision History
--      Version 1.0:
--      Date: 10/2023
--      Comments: Original
--
--/------------------------------------------------------------------------------------

library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.STD_LOGIC_ARITH.ALL;
use IEEE.STD_LOGIC_UNSIGNED.ALL;

entity BoothMultiplier is
    Port (
        a, b : in  std_logic_vector(7 downto 0);
        result : out std_logic_vector(15 downto 0)
    );
end BoothMultiplier;

architecture Behavioral of BoothMultiplier is
signal temp_signal : std_logic_vector(7 downto 0);
begin
temp_signal <= a;
    process
        variable product: std_logic_vector(15 downto 0) := (others => '0'); -- Initialize product to 0
        variable multiplier_shifted: std_logic_vector(7 downto 0) := temp_signal;
        variable partial_product: std_logic_vector(15 downto 0);
    begin
        for i in 1 to 8 loop
            if multiplier_shifted(1 downto 0) = "01" then
                partial_product := (product(15) & product(15 downto 1)) + b;
            elsif multiplier_shifted(1 downto 0) = "10" then
                partial_product := (product(15) & product(15 downto 1)) - b;
            else
                partial_product := (others => '0'); -- No operation
            end if;

            product := (product(15) & partial_product(15 downto 1));
            multiplier_shifted := multiplier_shifted(6 downto 0) & '0';
        end loop;

        result <= product; -- Assign the result
    end process;
end Behavioral;